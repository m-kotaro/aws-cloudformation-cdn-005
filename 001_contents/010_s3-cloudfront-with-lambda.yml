AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - "AWS::Serverless-2016-10-31"
  - "AWS::LanguageExtensions"

Parameters:
  CustomParameter001:
    Type: "String"
    Description: "This is custom-parameter."
    Default: "custom-parameter"
  DomainName:
    Type: "String"
    Description: "This is domain name for CloudFront Distributoin."
  AcmCertificateArn:
    Type: "String"
  HostedZoneId:
    Type: "String"
  AllowedIPAddress:
    Type: "CommaDelimitedList"
    Description: "Set the permitted IP addresses separated by commas.ex) 192.0.2.0,198.51.100.0,203.0.113.0"
    Default: "0.0.0.0"
  LambdaEdgeFunctionAlias:
    Type: "String"
    Default: "alias"

Resources:
  # ------------------------------------------------------------#
  # S3::Bucket
  # ------------------------------------------------------------#
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "s3-${CustomParameter001}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  # ------------------------------------------------------------#
  # CloudFront::OriginAccessControl
  # ------------------------------------------------------------#
  OAC:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties: 
      OriginAccessControlConfig:
        Description: Access Control
        Name: !Sub "oac-${CustomParameter001}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # ------------------------------------------------------------#
  # CloudFront::Distribution
  # ------------------------------------------------------------#
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    DependsOn:
      - S3Bucket
      - LambdaFunction
    Properties: 
      DistributionConfig:
        Comment: !Sub "cloudfront-${CustomParameter001}"
        Aliases:
          - !Ref DomainName
        DefaultRootObject: "index.html"
        DefaultCacheBehavior: 
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: !Ref S3Bucket
          ViewerProtocolPolicy: "redirect-to-https"
          LambdaFunctionAssociations:
            - EventType: "viewer-request"
              LambdaFunctionARN: !Ref LambdaFunction.Version
        Enabled: true
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: !Ref S3Bucket
            OriginAccessControlId: !GetAtt OAC.Id
            S3OriginConfig: 
              OriginAccessIdentity: ""
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only

  # ------------------------------------------------------------#
  # S3::BucketPolicy
  # ------------------------------------------------------------#
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    DependsOn: 
      - S3Bucket
      - CloudFrontDistribution
      - OAC
    Properties: 
      Bucket: !Ref S3Bucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudfront.amazonaws.com"
            Action: 
              - "s3:GetObject"
            Resource: 
              - !Sub ${S3Bucket.Arn}/*
            Condition: 
              StringEquals:
                AWS:SourceArn: 
                  - !Join 
                    - ""
                    - - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/"
                      - !Ref CloudFrontDistribution

  # ------------------------------------------------------------#
  # IAM::Role
  # ------------------------------------------------------------#
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "role-auth-lmd-${CustomParameter001}"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "edgelambda.amazonaws.com"
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # ------------------------------------------------------------#
  # Serverless::Function
  # ------------------------------------------------------------#
  LambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "lmd-auth-${CustomParameter001}"
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaRole.Arn
      AutoPublishAlias: !Ref LambdaEdgeFunctionAlias
      InlineCode: !Sub
        - |
            function handler(event) {

              var request = event.request;
              var clientIP = event.viewer.ip;
            
              var allowedIPAddress = ${allowedIPAddress}
              var isPermittedIp = allowedIPAddress.includes(clientIP);
            
              if (isPermittedIp) {

                // echo -n user:pass | base64
                var authString = "Basic ${authString}";
            
                if (
                  typeof headers.authorization === "undefined" ||
                  headers.authorization.value !== authString
                ) {
                  return {
                    statusCode: 401,
                    statusDescription: "Unauthorized",
                    headers: { "www-authenticate": { value: "Basic" } }
                  };
                }

                return request;
              } else {
                return {
                  statusCode: 403,
                  statusDescription: 'Forbidden',
                };
              }
            }
        - authString: !Base64 { "Fn::Join": [ ":", [ { "Ref": "User" }, { "Ref": "Password" } ] ] }
          allowedIPAddress: { "Fn::ToJsonString": !Ref AllowedIPAddress }
#             Fn::Join: [ ":", [ !Ref User,  !Ref Password ] ]
# { "Fn::Join": [ ":", [ { "Ref": "User" }, { "Ref": "Password" } ] ] }

        # - 
        # - allowedIPAddress: { "Fn::ToJsonString": !Ref AllowedIPAddress }
        #   authString : Fn::Base64: !Join [ ":", [ !Ref User,  !Ref Password ] ]

  # ------------------------------------------------------------#
  # Logs::LogGroup
  # ------------------------------------------------------------#
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn:
      - LambdaFunction
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"

  # ------------------------------------------------------------#
  # Route53::RecordSet
  # ------------------------------------------------------------#
  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # this is AWS-specific constant value
